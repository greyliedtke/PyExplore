"""
matrix operations for :
x,y to array index
characters


"""


# ----------------------------------------------------
# characters
"""
file for converting characters to matrixs
"""
char_offset = [
    [0, 11],
    [4, 11],
    [8, 11],
    [12, 11],
    [0, 0],
    [4, 0],
    [8, 5],
    [12, 5],
]

char_dict = {
    0: [
        [1, 1, 1],
        [1, 0, 1],
        [1, 0, 1],
        [1, 0, 1],
        [1, 1, 1],
    ],
    1: [
        [0, 1, 0],
        [0, 1, 0],
        [0, 1, 0],
        [0, 1, 0],
        [0, 1, 0],
    ],
    2: [
        [1, 1, 1],
        [0, 0, 1],
        [1, 1, 1],
        [1, 0, 0],
        [1, 1, 1],
    ],
    3: [
        [1, 1, 1],
        [0, 0, 1],
        [1, 1, 1],
        [0, 0, 1],
        [1, 1, 1],
    ],
    4: [
        [1, 0, 1],
        [1, 0, 1],
        [1, 1, 1],
        [0, 0, 1],
        [0, 0, 1],
    ],
    5: [
        [1, 1, 1],
        [1, 0, 0],
        [1, 1, 1],
        [0, 0, 1],
        [1, 1, 1],
    ],
    6: [
        [1, 1, 1],
        [1, 0, 0],
        [1, 1, 1],
        [1, 0, 1],
        [1, 1, 1],
    ],
    7: [
        [1, 1, 1],
        [0, 0, 1],
        [0, 0, 1],
        [0, 0, 1],
        [0, 0, 1],
    ],
    8: [
        [1, 1, 1],
        [1, 0, 1],
        [1, 1, 1],
        [1, 0, 1],
        [1, 1, 1],
    ],
    9: [
        [1, 1, 1],
        [1, 0, 1],
        [1, 1, 1],
        [0, 0, 1],
        [0, 0, 1],
    ],
}

class Char_Setting:
    def __init__(self, offset):
        self.offset = offset
        self.character = 0

    def char_matrix(self, character):
        char_matrix = char_dict[character]
        cx = []

        for i, row in enumerate(char_matrix):
            for j, b in enumerate(row):
                if b == 1:
                    x=self.offset[0] + j
                    y=self.offset[1] + (4-i)
                    cx.append([x,y])

        return cx

characters = [Char_Setting(cs) for cs in char_offset]
# ------------------------------------------------------

# ------------------------------------------------------
led_matrix = [
    [240, 239, 208, 207, 176, 175, 144, 143, 112, 111, 80, 79, 48, 47, 16, 15],
    [241, 238, 209, 206, 177, 174, 145, 142, 113, 110, 81, 78, 49, 46, 17, 14],
    [242, 237, 210, 205, 178, 173, 146, 141, 114, 109, 82, 77, 50, 45, 18, 13],
    [243, 236, 211, 204, 179, 172, 147, 140, 115, 108, 83, 76, 51, 44, 19, 12],
    [244, 235, 212, 203, 180, 171, 148, 139, 116, 107, 84, 75, 52, 43, 20, 11],
    [245, 234, 213, 202, 181, 170, 149, 138, 117, 106, 85, 74, 53, 42, 21, 10],
    [246, 233, 214, 201, 182, 169, 150, 137, 118, 105, 86, 73, 54, 41, 22, 9],
    [247, 232, 215, 200, 183, 168, 151, 136, 119, 104, 87, 72, 55, 40, 23, 8],
    [248, 231, 216, 199, 184, 167, 152, 135, 120, 103, 88, 71, 56, 39, 24, 7],
    [249, 230, 217, 198, 185, 166, 153, 134, 121, 102, 89, 70, 57, 38, 25, 6],
    [250, 229, 218, 197, 186, 165, 154, 133, 122, 101, 90, 69, 58, 37, 26, 5],
    [251, 228, 219, 196, 187, 164, 155, 132, 123, 100, 91, 68, 59, 36, 27, 4],
    [252, 227, 220, 195, 188, 163, 156, 131, 124, 99, 92, 67, 60, 35, 28, 3],
    [253, 226, 221, 194, 189, 162, 157, 130, 125, 98, 93, 66, 61, 34, 29, 2],
    [254, 225, 222, 193, 190, 161, 158, 129, 126, 97, 94, 65, 62, 33, 30, 1],
    [255, 224, 223, 192, 191, 160, 159, 128, 127, 96, 95, 64, 63, 32, 31, 0],
]

def xy_mat(x, y):
    row = led_matrix[-y]
    val = row[x]
    return val

def mat_xy(val):
    for i, row in enumerate(led_matrix):
        if val in row:
            x = row.index(val)
            y = len(row) - i
            return x, y
# ------------------------------------------------------
